services:
  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
      - MSSQL_MEMORY_LIMIT_MB=2048
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1' -N -C || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  worker:
    build:
      context: .
      dockerfile: src/ImageNet.Worker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Server=db;Database=ImageNetDb;User=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;
    restart: "no"  # Ensures the container stops after the task is done

  api:
    build:
      context: .
      dockerfile: src/ImageNet.Api/Dockerfile
    ports:
      - "5248:80"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Server=db;Database=ImageNetDb;User=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=True;
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80

  client:
    build:
      context: ./imagenet-client
      dockerfile: Dockerfile
    volumes:
      - ./imagenet-client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_BASE_URL=http://localhost:5248/api
    command: npm start

volumes:
  sqlserver_data: